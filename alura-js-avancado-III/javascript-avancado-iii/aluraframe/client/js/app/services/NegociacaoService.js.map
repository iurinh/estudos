{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","get","map","Negociacao","Date","objeto","data","quantidade","valor","catch","Error","console","log","erro","negociacao","ConnectionFactory","getConnection","NegociacaoDAO","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","negociacaoExistente","isEquals"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\tconstructor(){\r\n\t\tthis._http = new HttpService();\r\n\t}\r\n\r\n\tobterNegociacoes(){\r\n\t\treturn Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ])\r\n        .then(periodos => {\r\n            let negociacoes = periodos.reduce((dados, periodo) => dados.concat(periodo),[])\r\n            return negociacoes;\r\n        })\r\n\t}\r\n\r\n\tobterNegociacoesDaSemana() {\r\n\r\n        return this._http\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n\r\n            })\r\n            .catch(erro => {\r\n                throw new Error('Não foi possível obter as negociações da semana');\r\n            })\r\n\t  }\r\n\r\n\tobterNegociacoesDaSemanaAnterior() {\r\n\r\n        return this._http\r\n            .get('negociacoes/anterior')\r\n            .then(negociacoes => {\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações da semana anterior');\r\n\t    \t})\r\n\t}\r\n\r\n\tobterNegociacoesDaSemanaRetrasada() {\r\n\r\n        return this._http\r\n            .get('negociacoes/retrasada')\r\n            .then(negociacoes => {\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações da semana retrasada');\r\n\t\t    })\r\n\t}\r\n\r\n    cadastra(negociacao){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDAO(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negoci~ção adicionada com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel adicionar a negociação')\r\n            });\r\n\r\n    }\r\n\r\n    lista(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDAO(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel obter as negociações')\r\n            });\r\n    }\r\n\r\n    apaga(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDAO(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel apagar as negociações')\r\n            });\r\n    }\r\n\r\n    importa(listaAtual){\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => negociacoes.filter(negociacao => \r\n                !listaAtual.some(negociacaoExistente => \r\n                    negociacaoExistente.isEquals(negociacao)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possivel buscar negociações para importar')\r\n            });\r\n\r\n    }\r\n}"]}